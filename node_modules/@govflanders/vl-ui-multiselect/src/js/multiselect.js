/**
 * Progressively enhance a multiselect field
 */
const nameSpace = vl.ns,
  msClass = `js-${nameSpace}select`,
  msInputClass = `${msClass}__input`,
  msInputClassMulti = `${msInputClass}--multi`,
  msInputClassButton = `${msInputClass}__button`,
  msCtaClass = `${nameSpace}select__cta`,
  msCtaTitleClass = `${nameSpace}select__cta__title`,
  msGroupClass = `${nameSpace}select__group`,
  msListClass = `${nameSpace}select__list`,
  msListWrapperClass = `${nameSpace}select__list-wrapper`,
  msWrapperClass = `${nameSpace}select__wrapper`,
  msFormClass = `${nameSpace}select__form`,
  msCtaActiveClass = `${msCtaClass}--active`,
  dataPrefix = `data-${nameSpace}`,
  msDressedAtt = `${dataPrefix}multiselect-dressed`,
  msContentAtt = `${dataPrefix}content`,
  msInputAtt = `${dataPrefix}input`,
  msRecordsAtt = `${dataPrefix}records`,
  msRecordAtt = `${dataPrefix}record`,
  msFocusAtt = `${dataPrefix}focus`,
  msShowAtt = `${dataPrefix}show`,
  msSelectedAtt = `${dataPrefix}selected`,
  msIndexAtt = `${dataPrefix}index`,
  msLabelAtt = `${dataPrefix}label`,
  msAtt = `${dataPrefix}multiselect`,
  msIDAtt = `${dataPrefix}id`,
  msPlaceholderAtt = `${dataPrefix}placeholder`,
  msValueAtt = `${dataPrefix}value`,
  msEmptyAtt = `${dataPrefix}empty`,
  msSearchEmptyAtt = `${dataPrefix}search-empty`;

let selectedArrOptions = null;

/**
 * Eventhandler | selectContainer keyDown
 * @method _selectContentInputKeyDownHandler
 * @param  {event}
 */
const _selectContentInputKeyDownHandler = event => {
  if (event.shiftKey && event.keyCode === 9) {
    event.preventDefault();
    return false;
  }

  switch (event.keyCode) {
    case 27:
    case 9:
      event.preventDefault();
      return false;
  }
};

/**
 * Setting the general data attributes & aria tags
 * @method _setVisibilityAttributes
 * @param  {element} field
 * @param  {boolean} dataShow
 */
const _setVisibilityAttributes = (field, dataShow) => {
  field.setAttribute(msShowAtt, dataShow);
  field.setAttribute('aria-hidden', !dataShow);
};

/**
 * Generate the enhanced select
 * @method _generateSelect
 * @param  {element} select
 * @return {[arr, uniqId, selectContainer]}
 */
const _generateSelect = select => {
  let arr = [],
    uniqId = vl.util.uniqueId(),
    selectContainer = select.closest(`.${msClass}`),
    selectWrapper,
    selectForm,
    selectDummyButton,
    selectDummyInput,
    placeholder,
    selectFormInput,
    selectFormInputDescription,
    selectListWrapper,
    selectList,
    optgroups,
    i = 0;

  // Creating empty elements
  selectWrapper = document.createElement('div');
  selectForm = document.createElement('div');
  selectListWrapper = document.createElement('div');
  selectList = document.createElement('section');
  selectFormInput = document.createElement('input');
  selectFormInputDescription = document.createElement('span');

  // Hide normal select field
  vl.util.addClass(select, `${nameSpace}u-visually-hidden`);
  select.setAttribute('aria-hidden', 'true');
  select.setAttribute('tabindex', '-1');

  // Get data-id or generate one
  if (select.hasAttribute(msIDAtt)) {
    uniqId = select.getAttribute(msIDAtt);
  }

  selectContainer.setAttribute(msIDAtt, uniqId);

  // Fake select field
  selectDummyButton = document.createElement('button');
  selectDummyInput = document.createElement('div');

  selectDummyInput.setAttribute(msFocusAtt, '');
  selectDummyInput.setAttribute('id', uniqId);
  vl.util.addClass(selectDummyInput, msInputClass);
  vl.util.addClass(selectDummyInput, msInputClassMulti);

  selectDummyButton.setAttribute('aria-haspopup', 'true');
  selectDummyButton.setAttribute('aria-expanded', 'false');
  vl.util.addClass(selectDummyButton, msInputClassButton);

  if (
    select.hasAttribute('disabled') &&
    select.getAttribute('disabled') !== 'false'
  ) {
    selectDummyInput.setAttribute('disabled', 'true');
  }

  placeholder = select.querySelector(`[${msPlaceholderAtt}]`);
  selectDummyButton.innerHTML = placeholder.label;

  selectContainer.appendChild(selectDummyInput);
  selectContainer.appendChild(selectDummyButton);

  vl.util.addClass(selectWrapper, msWrapperClass);
  selectWrapper.setAttribute(msContentAtt, '');
  selectWrapper.setAttribute('aria-labelledby', uniqId);
  _setVisibilityAttributes(selectWrapper, false);

  selectContainer.appendChild(selectWrapper);

  vl.util.addClass(selectForm, msFormClass);

  selectWrapper.appendChild(selectForm);

  selectFormInput.setAttribute('type', 'text');
  selectFormInput.setAttribute('autocomplete', 'off');
  vl.util.addClass(selectFormInput, `${nameSpace}input-field`);
  vl.util.addClass(selectFormInput, `${nameSpace}input-field--block`);
  selectFormInput.setAttribute(msInputAtt, '');
  selectFormInput.setAttribute(msFocusAtt, '');
  selectFormInput.setAttribute('value', '');
  selectFormInput.setAttribute('tabindex', '-1');
  selectFormInput.setAttribute(
    'aria-describedby',
    `${nameSpace}selectFormInputDescription${uniqId}`
  );
  selectFormInput.setAttribute('aria-haspopup', 'listbox"');

  selectForm.appendChild(selectFormInput);

  selectFormInputDescription.setAttribute(
    'id',
    `${nameSpace}selectFormInputDescription${uniqId}`
  );
  selectFormInputDescription.innerHTML =
    'U bevindt zich in de zoekfunctie van een dropdown menu met multiselect in een formulier. Navigeer door de opties met de pijltjes en selecteer met enter. Gebruik escape om de dropdown te sluiten.';
  vl.util.addClass(selectFormInputDescription, `${nameSpace}u-visually-hidden`);

  selectForm.appendChild(selectFormInputDescription);

  // Select List Wrapper
  vl.util.addClass(selectListWrapper, msListWrapperClass);
  selectListWrapper.setAttribute('role', 'listbox');

  selectWrapper.appendChild(selectListWrapper);

  // Select list
  vl.util.addClass(selectList, msListClass);
  selectList.setAttribute(msRecordsAtt, '');

  selectListWrapper.appendChild(selectList);

  // Generate option groups based on optgroups in real select
  optgroups = select.querySelectorAll('optgroup');

  if (optgroups.length) {
    vl.util.each(optgroups, optgroup => {
      let label = optgroup.getAttribute('label'),
        selectOptionGroupWrapper = document.createElement('section');

      vl.util.addClass(selectOptionGroupWrapper, msGroupClass);
      selectOptionGroupWrapper.setAttribute(msLabelAtt, label);
      selectOptionGroupWrapper.setAttribute('role', 'group');
      selectList.appendChild(selectOptionGroupWrapper);
    });
  }

  /**
   * Generate list items based on options in real select
   * @method vl.util.each
   * @param  {object} selectOption
   * @param  {object} opt
   *
   */
  vl.util.each(select.options, opt => {
    let value = opt.value,
      label = opt.innerHTML,
      selectOption = document.createElement('div'),
      selectOptionButton = document.createElement('button'),
      selectOptionTitleSpan = document.createElement('span'),
      closestOptGroup,
      closestGeneratedOptGroup;

    if (!opt.hasAttribute(msPlaceholderAtt)) {
      vl.util.addClass(selectOption, `${nameSpace}select__item`);
    }

    vl.util.addClass(selectOptionButton, msCtaClass);

    // If option is selected set the element active and change the label in the DummyInput
    if (opt.selected) {
      vl.util.addClass(selectOptionButton, msCtaActiveClass);
      selectOptionButton.setAttribute('aria-selected', 'true');
    } else {
      selectOptionButton.setAttribute('aria-selected', 'false');
    }

    selectOptionButton.setAttribute('type', 'button');
    selectOptionButton.setAttribute(msIndexAtt, i);
    selectOptionButton.setAttribute(msValueAtt, value);
    selectOptionButton.setAttribute(msLabelAtt, label);
    selectOptionButton.setAttribute(msRecordAtt, '');
    selectOptionButton.setAttribute(msFocusAtt, '');
    selectOptionButton.setAttribute('role', 'option');
    selectOptionButton.setAttribute('tabindex', '-1');

    // Title (span wrapper)
    vl.util.addClass(selectOptionTitleSpan, msCtaTitleClass);
    selectOptionTitleSpan.innerHTML = label;

    // Appends
    selectOptionButton.appendChild(selectOptionTitleSpan);
    selectOption.appendChild(selectOptionButton);

    // Assign to option group if available
    closestOptGroup = opt.closest('optgroup');

    if (closestOptGroup === null) {
      selectList.appendChild(selectOption);
    } else {
      closestGeneratedOptGroup = selectList.querySelector(
        `[${msLabelAtt}="${closestOptGroup.getAttribute('label')}"]`
      );

      closestGeneratedOptGroup.appendChild(selectOption);
    }

    // Add to arrOptions array
    arr.push(label);
    i++;
  });

  return [arr, uniqId, selectContainer];
};

/**
 * Generating pills used in the multiselect input field
 * @method _generatePills
 * @param  {select}  select
 * @param  {element} selectContainer
 * @param  {input}   selectDummyInput
 * @param  {element} selectContentListItems
 * @param  {id}      selectId
 * @return {activeOpts}
 */
const _generatePills = (
  select,
  selectContainer,
  selectDummyInput,
  selectContentListItems,
  selectId
) => {
  const activeOpts = selectContainer.getElementsByClassName(msCtaActiveClass);

  // Clear all elements
  selectDummyInput.innerHTML = '';

  // If present: generate pills based on active options
  if (activeOpts.length > 0) {
    vl.util.each(activeOpts, item => {
      let pillWrapper = document.createElement('div'),
        pillSpan = document.createElement('span'),
        pillCta = document.createElement('a');

      const _ctaEvent = event => {
        let correspondingItem;

        event.preventDefault();

        correspondingItem = selectContainer.querySelector(
          `[${msRecordAtt}][${msValueAtt}="${item.getAttribute(msValueAtt)}"]`
        );

        vl.util.removeClass(correspondingItem, msCtaActiveClass);

        // Generate Pills
        _generatePills(
          select,
          selectContainer,
          selectDummyInput,
          selectContentListItems,
          selectId
        );

        // Set selectfield options
        selectedArrOptions = _setOriginalSelectFieldOptions(
          selectId,
          selectContentListItems
        );

        event.stopPropagation
          ? event.stopPropagation()
          : event.cancelBubble = true;
      };

      const _ctaKeydownEvent = event => {
        if (event.keyCode === 13) {
          _ctaEvent(event);
        }
      };

      vl.util.addClass(pillWrapper, `${nameSpace}pill`);
      vl.util.addClass(pillWrapper, `${nameSpace}pill--closable`);
      selectDummyInput.appendChild(pillWrapper);

      pillSpan.innerHTML = item.getAttribute(msLabelAtt);
      pillWrapper.appendChild(pillSpan);

      vl.util.addClass(pillCta, `${nameSpace}pill__close`);
      pillCta.setAttribute('href', '#');
      pillCta.setAttribute(msValueAtt, item.getAttribute(msValueAtt));
      pillCta.innerHTML = 'verwijder optie';

      // Remove pill on click/keyup(enter)
      pillCta.addEventListener('click', _ctaEvent);
      pillCta.addEventListener('keyup', _ctaKeydownEvent);

      pillWrapper.appendChild(pillCta);
    });
  } else {
    // Set placeholder or empty field
    let placeholder = select.querySelector(`[${msPlaceholderAtt}]`);

    if (placeholder === null) {
      selectDummyInput.innerHTML = '';
    } else {
      selectDummyInput.innerHTML = placeholder.label;
    }
  }

  return activeOpts;
};

/**
 * Generate the "no results found" option
 * @method _setNoResultsFoundElement
 * @param  {string} state
 * @param  {element} selectContainer
 * @param  {element} selectContentList
 */
const _setNoResultsFoundElement = (
  state,
  selectContainer,
  selectContentList
) => {
  let prevEl, noResultsFoundElement, noResultsFoundElementContent;

  switch (state) {
    case 'show':
      prevEl = selectContentList.querySelector(`[${msEmptyAtt}]`);

      if (prevEl === null) {
        noResultsFoundElement = document.createElement('div');
        noResultsFoundElementContent = document.createElement('div');

        vl.util.addClass(noResultsFoundElement, `${nameSpace}select__item`);
        selectContentList.appendChild(noResultsFoundElement);

        vl.util.addClass(noResultsFoundElementContent, `${nameSpace}select__empty`);
        noResultsFoundElementContent.setAttribute(msEmptyAtt, '');

        if (selectContainer.hasAttribute(msSearchEmptyAtt)) {
          noResultsFoundElementContent.innerHTML = selectContainer.getAttribute(
            msSearchEmptyAtt
          );
        } else {
          noResultsFoundElementContent.innerHTML = 'No results found';
        }

        noResultsFoundElement.appendChild(noResultsFoundElementContent);
      }
      break;
    case 'hide':
      prevEl = selectContentList.querySelector(`[${msEmptyAtt}]`);

      if (prevEl !== null) {
        vl.util.removeElement(prevEl);
      }
      break;
  }
};

/**
 * Setting the options in the hidden select field equal to the element selected in the generated select
 * @method _setOriginalSelectFieldOptions
 * @param  {id} selectId
 * @param  {element} selectContentListItems
 * @return {arrOptions}
 */
const _setOriginalSelectFieldOptions = (selectId, selectContentListItems) => {
  let event = new Event('change'),
    sel = document.querySelector(
      `.${msClass}[${msIDAtt}="${selectId}"] select`
    ),
    arrOptions = [],
    values = [],
    opts = sel.options;

  vl.util.each(selectContentListItems, item => {
    if (vl.util.hasClass(item, msCtaActiveClass)) {
      arrOptions.push(item);
      values.push(item.getAttribute(msValueAtt));
    }
  });

  vl.util.each(opts, opt => {
    opt.selected = false;

    vl.util.each(values, value => {
      if (opt.value === value) {
        opt.selected = true;
      }
    });
  });

  sel.dispatchEvent(event);

  // Return selected all options
  return arrOptions;
};

/**
 * Multiselect
 *
 * Public Methods
 * --------------
 * @method dress(element)
 * @method dressAll
 * @method setDisabledState(select, state)
 */
class Multiselect {
  contructor() {
    this.lastSelectId = null;
    this.lastContainer = null;
  }

  /**
   * Dresses vl.util.each instance of multiselect
   * @method dress
   * @param  {select} selectField
   */
  dress(selectField) {
    // Variables needed in Generate selects based on original <select> element
    let arr = _generateSelect(selectField),
      arrOptions = arr[0],
      selectId = arr[1],
      selectContainer = arr[2],
      activeArrOptions = arrOptions, // = options that are shown
      selectDummyInput = selectContainer.querySelector(`.${msInputClass}`),
      selectContent = selectContainer.querySelector(`[${msContentAtt}]`),
      selectContentInput = selectContent.querySelector(`[${msInputAtt}]`),
      selectContentList = selectContent.querySelector(`[${msRecordsAtt}]`),
      selectContentListItems = selectContent.querySelectorAll(
        `[${msRecordAtt}]`
      ),
      curOption,
      curOptionIndex = 0;

    selectedArrOptions = _generatePills(
      selectField,
      selectContainer,
      selectDummyInput,
      selectContentListItems,
      selectId,
      selectedArrOptions
    );
    // = options that are selected

    selectField.setAttribute(msDressedAtt, true);

    /**
     * Set state of vl.util.each selectContent
     * @method _setSelectState
     * @param  {Boolean} isShown
     */
    const _setSelectState = isShown => {
      let dataShow = false,
        ariaHidden = true,
        ariaExpanded = false;

      if (isShown) {
        dataShow = true;
        ariaHidden = false;
        ariaExpanded = true;
      }

      selectContent.setAttribute(msShowAtt, dataShow);
      selectContent.setAttribute('aria-hidden', ariaHidden);
      selectContent.setAttribute('aria-expanded', ariaExpanded);
    };

    /**
     * Handles keyDown and keyUp keyboard event
     * @method _keyHandler
     * @param  {event} event
     * @param  {string} direction ['up', 'down']
     */
    const _keyHandler = (event, direction) => {
      let directionIsUp =
          direction === 'up' ? true : direction === 'down' ? false : null,
        changeParameter = directionIsUp
          ? curOptionIndex > 0
          : curOptionIndex < activeArrOptions - 1;

      event.preventDefault();

      if (selectContent.getAttribute(msShowAtt) !== 'true') {
        // Tonen bij arrow down en index 1 verhogen wodat je op dezelfde positie zit bij het openen
        _setSelectState(true);

        directionIsUp ? curOptionIndex++ : curOptionIndex--;
      }

      if (changeParameter) {
        const el = selectContentList.querySelector(
          `[${msRecordAtt}][${msIndexAtt}="${curOptionIndex}"]`
        );

        directionIsUp ? curOptionIndex-- : curOptionIndex++;
        curOption.removeAttribute(msSelectedAtt);

        el.setAttribute(msSelectedAtt, 'true');
        el.focus();

        if (selectContentInput === null) {
          selectDummyInput.focus();
        } else {
          selectContentInput.focus();
        }
      }
    };

    /**
     * Set current option
     * @method _setCurrentOption
     */
    const _setCurrentOption = () => {
      curOption = selectContentList.querySelector(
        `[${msRecordAtt}][${msSelectedAtt}="true"]`
      );
      curOption === null
        ? curOption = selectContentList.querySelector(
          `[${msRecordAtt}][${msIndexAtt}="0"]`
        )
        : null;
      curOptionIndex = curOption.getAttribute(msIndexAtt);
    };

    /**
     * Reset options
     * @method _resetOptions
     */
    const _resetOptions = () => {
      vl.util.each(arrOptions, item => {
        let el = selectContentList.querySelector(
          `[${msRecordAtt}][${msLabelAtt}="${item}"]`
        );

        el.removeAttribute(msSelectedAtt);
        el.setAttribute(msShowAtt, 'true');
        el.setAttribute(msIndexAtt, arrOptions.findIndex(item));

        if (
          selectContentList.querySelector(
            `[${msRecordAtt}][${msIndexAtt}="0"]`
          ) !== null
        ) {
          selectContentList
            .querySelector(`[${msRecordAtt}][${msIndexAtt}="0"]`)
            .setAttribute(msSelectedAtt, 'true');
        }
      });
    };

    /**
     * Handles default keypress
     * @method _keyDefaultHandler
     * @param  {element} selectedEl
     */
    const _keyDefaultHandler = selectedEl => {
      selectedEl = selectedEl || null;

      if (selectContentInput !== null) {
        let val = selectContentInput.value,
          el;

        activeArrOptions = [];

        vl.util.each(arrOptions, item => {
          el = selectContentList.querySelector(
            `[${msRecordAtt}][${msLabelAtt}="${item}"]`
          );

          // Set visibility hidden of all items & remove index of all items & remove old focus
          el.setAttribute(msShowAtt, 'false');
          el.removeAttribute(msIndexAtt);
          el.removeAttribute(msSelectedAtt);

          // If substring is present in string show item and push to array
          if (item.toLowerCase().indexOf(val.toLowerCase()) > -1) {
            el.setAttribute(msShowAtt, 'true');
            activeArrOptions.push(item);
          }

          if (activeArrOptions.length) {
            _setNoResultsFoundElement(
              'hide',
              selectContainer,
              selectContentList
            );

            vl.util.each(activeArrOptions, (opt, i) => {
              selectContentList
                .querySelector(`[${msRecordAtt}][${msLabelAtt}="${opt}"]`)
                .setAttribute(msIndexAtt, i);
            });

            // Set focus on first element
            if (selectedEl === null) {
              let el = selectContentList.querySelector(
                `[${msRecordAtt}][${msIndexAtt}="0"]`
              );

              el === null ? null : el.setAttribute(msSelectedAtt, 'true');
            } else {
              selectedEl.setAttribute(msSelectedAtt, 'true');
              window.setTimeout(() => {
                selectedEl.focus();
                selectContentInput.focus();
              }, 1);
            }
          } else {
            _setNoResultsFoundElement(
              'show',
              selectContainer,
              selectContentList
            );
          }

          let optgroups = selectContentList.querySelectorAll(
            `.${msGroupClass}`
          );

          vl.util.each(optgroups, optgroup => {
            let items = optgroup.querySelectorAll(
              `.${msCtaClass}[${msShowAtt}="true"]`
            );

            items.length
              ? optgroup.style.display = 'block'
              : optgroup.style.display = 'none';
          });
        });
      }
    };

    /**
     *
     * @method _selectContentInputKeyUpHandler
     * @param  {event} event
     */
    const _selectContentInputKeyUpHandler = event => {
      event.preventDefault();

      /**
       * If Tab + Shift key are pressed
       * @method if
       * @param  {tabKey && shiftKey} event
       */
      if (event.shiftKey && event.keyCode === 9) {
        _setSelectState(false);
        selectDummyInput.focus();
      }

      activeArrOptions.length <= 0 ? _resetOptions() : _setCurrentOption();

      /**
       * Handles keypresses
       * @method switch
       * @param  {keypress} event
       */
      switch (event.keyCode) {
        case 9: // Tab Key
        case 27: // Esc key
          vl.util.triggerEvent(document, 'click');
          selectDummyInput.focus();
          break;
        case 8: // Backspace key
          _resetOptions();
          _keyDefaultHandler();
          break;
        case 32: // Space key
          selectField.getAttribute(msShowAtt) === 'true'
            ? null
            : selectDummyInput.click();
          break;
        case 13: // Enter key
          if (selectField.getAttribute(msShowAtt) === true) {
            curOption.click();
          } else {
            _setSelectState(true);
            selectContentInput === null
              ? selectDummyInput.focus()
              : selectContentInput.focus();
          }
          break;
        case 38: // Arrow up key
          activeArrOptions.length > 0 ? _keyHandler(event, 'up') : null;
          break;
        case 40: // Arrow down key
          activeArrOptions.length > 0 ? _keyHandler(event, 'down') : null;
          break;
        default:
          _keyDefaultHandler();
          break;
      }
    };

    /**
     * Handles events on keydown on the selectContainer
     * @method _selectContainerKeyDownEventHandler
     * @param  {event}
     */
    const _selectContainerKeyDownEventHandler = event => {
      if (event.shiftKey && event.keyCode === 9) {
        event.preventDefault();
        return false;
      }

      switch (event.keyCode) {
        case 27:
        case 9:
          event.preventDefault();
          return false;
      }
    };

    /**
     * Eventhandles | selectDummyInput Click
     * @method _selectDummyInputClickEventHandler
     */
    const _selectDummyInputClickEventHandler = () => {
      if (selectContent.getAttribute(msShowAtt) === 'false') {
        // Show select
        _setSelectState(true);

        // Set focus on search if present
        if (selectContentInput !== null) {
          selectContentInput.focus();
        }

        // Select first element in generated records
        if (
          selectContentList.querySelector(
            `[${msRecordAtt}][${msIndexAtt}="0"]`
          ) !== null
        ) {
          selectContentList
            .querySelector(`[${msRecordAtt}][${msIndexAtt}="0"]`)
            .setAttribute(msSelectedAtt, 'true');
        }
      } else {
        _setSelectState(false);
      }
    };

    /**
     * Loop through dynamically generated records
     * @type {selectListItems}
     */
    vl.util.each(selectContentListItems, item => {
      item.addEventListener('click', () => {
        // Toggle active class to selected element
        vl.util.toggleClass(item, msCtaActiveClass);

        // Set selected state to original select
        selectedArrOptions = _setOriginalSelectFieldOptions(
          selectId,
          selectContentListItems
        );

        // Generate pills
        _generatePills(
          selectField,
          selectContainer,
          selectDummyInput,
          selectContentListItems,
          selectId
        );

        // Set focus
        selectContentInput === null
          ? selectDummyInput.focus()
          : selectContentInput.focus();

        // Remove query in select input
        if (selectContentInput !== null) {
          selectContentInput.value = '';
          _keyDefaultHandler(
            selectContentList.querySelector(`[${msSelectedAtt}="true"]`)
          );
        }
      });
    });

    // Eventhandlers
    selectContentInput
      ? selectContentInput.addEventListener(
        'keyup',
        _selectContentInputKeyUpHandler
      )
      : null;

    selectContentInput
      ? selectContentInput.addEventListener(
        'keydown',
        _selectContentInputKeyDownHandler
      )
      : null;
    selectContainer
      ? selectContainer.addEventListener(
        'keydown',
        _selectContainerKeyDownEventHandler
      )
      : null;

    selectDummyInput
      ? selectDummyInput.addEventListener(
        'click',
        _selectDummyInputClickEventHandler
      )
      : null;

    /**
     * Set state of select on click outside of select
     * @event
     */
    document.addEventListener('click', () => {
      _setSelectState(false);
    });

    selectContainer.addEventListener('click', event => {
      event.stopPropagation();
      event.preventDefault();
    });
  }

  /**
   * Select all instances and dress them
   * @method dressAll
   */
  dressAll() {
    const elements = document.querySelectorAll(
      `[${msAtt}]:not([${msDressedAtt}])`
    );

    vl.util.each(elements, element => {
      this.dress(element);
    });
  }

  /**
   * Set/remove disabled state of a select
   * @method setDisabledState
   * @param  {select}        select
   * @param  {disabledState} state
   */
  setDisabledState(select, state) {
    const selectContainer = select.closest(`.${msClass}`),
      selectDummyInput = selectContainer.querySelector(`.${msInputClass}`);

    if (state) {
      select.setAttribute('disabled', state);
      selectDummyInput.setAttribute('disabled', state);
    } else {
      select.removeAttribute('disabled');
      selectDummyInput.removeAttribute('disabled');
    }
  }
}

/**
 * Exporting class
 */
export default Multiselect;
