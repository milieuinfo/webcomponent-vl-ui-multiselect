/**
 * Pill Inpit
 **/
import Choices from 'choices.js';

/**
 * Private Variables
 */
const piClass = `js-${vl.ns}pill-input`,
  piPillInputClass = `${vl.ns}pill-input`,
  piPillContainerInnerClass = `${piPillInputClass}__inner`,
  piPillListClass = `${vl.ns}pill-input__list`,
  piPillListMultipleClass = `${piPillListClass}--multiple`,
  piPillClass = `${vl.ns}pill`,
  piPillClickableClass = `${piPillClass}--clickable`,
  piPillCloseClass = `${piPillClass}__close`,
  piPillNoticeClass = `${vl.ns}form__annotation`,
  piPillAtt = `data-${vl.ns}pill-input`,
  piPillDressedAtt = `${piPillAtt}-dressed`,
  piPillEmailAtt = `${piPillAtt}-email`,
  piPillUniqueAtt = `${piPillAtt}-unique`,
  piPillInputfieldClass = `${piPillClass}__input`;

/**
 * Private Functions
 */
const _prepareChoisesConfig = element => {
  let config = {};

  // If input should be unique
  if (element.hasAttribute(piPillUniqueAtt)) {
    config.duplicateItems = JSON.parse(element.getAttribute(piPillUniqueAtt));
  }

  // If input should only allow e-mail
  if (element.hasAttribute(piPillEmailAtt)) {
    config.regexFilter = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  }

  return config;
};

class PillInput {
  constructor() {
    this.selectInstances = [];
    this.globalConfig = {
      removeItemButton: true,
      duplicateItems: false,
      shouldSortItems: false,
      editItems: true,
      classNames: {
        containerOuter: piPillInputClass,
        containerInner: piPillContainerInnerClass,
        input: piPillInputfieldClass,
        list: piPillListClass,
        listItems: piPillListMultipleClass,
        item: piPillClass,
        itemClickable: piPillClickableClass,
        button: piPillCloseClass,
        notice: piPillNoticeClass
      },
      noResultsText: 'Geen resultaten gevonden',
      uniqueItemText: value => {
        return `Item "${value}" werd al toegevoegd`;
      },
      addItemText: value => {
        return `Druk Enter om <b>"${value}"</b> toe te voegen`;
      },
      maxItemText: maxItemCount => {
        return `Er kunnen maar ${maxItemCount} items worden toegevoegd.`;
      },
      callbackOnCreateTemplates: this._createTemplates
    };
  }

  _createTemplates(template) {
    const classNames = this.config.classNames;

    return {
      item: data => {
        return template(`
              <div class="${classNames.item}"
                data-item data-id="${data.id}"
                data-value="${data.value}"
                ${data.active ? 'aria-selected="true"' : ''}
                ${data.disabled ? 'aria-disabled="true"' : ''}
                data-deletable>
                  <span>${data.label}</span>
                  <a href="#" class="${classNames.button}"
                    data-button>
                    <span class="vl-u-visually-hidden">Verwijder</span>
                  </a>
              </div>
            `);
      },
      choice: data => {
        return template(`
          <div class="${classNames.item}
            ${
  data.disabled
    ? classNames.itemDisabled
    : classNames.itemSelectable
}"
            data-select-text="${this.config.itemSelectText}"
            data-choice
            ${
  data.disabled
    ? 'data-choice-disabled aria-disabled="true"'
    : 'data-choice-selectable'
}
            data-id="${data.id}"
            data-value="${data.value}"
            ${data.groupId > 0 ? 'role="treeitem"' : 'role="option"'}>
            ${data.label}
          </div>
        `);
      },
      notice: label => {
        return template(`
          <div class="${classNames.notice}">
            ${label}
          </div>
          `);
      }
    };
  }

  _buildPills(select, config) {
    let choice = new Choices(select, config);
    this.selectInstances.push(choice);
  }

  /**
   * dress one element
   * @param element
   */
  dress(element) {
    let config = {};

    element.setAttribute(piPillDressedAtt, true);

    // Build select config
    config = _prepareChoisesConfig(element);
    config = Object.assign(this.globalConfig, config);

    this._buildPills(element, config);
  }

  /**
   * dressAll function for the accordion functionality
   * @return {false}
   */
  dressAll() {
    // get all elements
    const elements = document.querySelectorAll(
      `.${piClass}:not([${piPillDressedAtt}]):not([data-${vl.ns}js-dress="false"]),
      [${piPillAtt}]:not([${piPillDressedAtt}]):not([data-${vl.ns}js-dress="false"])`
    );

    // add functionality to the element
    vl.util.each(elements, element => {
      this.dress(element);
    });
  }
}

if(!('pillInput' in vl)) {
  vl.pillInput = new PillInput();
  vl.pillInput.dressAll();
}

export default PillInput;
